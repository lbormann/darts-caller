name: Build

on:
  push:
    tags:
    - 'b*' # Push events to matching v*, i.e. v1.0, v20.15.10
    # branches:
    #   - master

jobs:

  createrelease:
    name: Create Release
    runs-on: [ubuntu-latest]
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
            # THIS IS A BETA RELEASE USING AT YOUR OWN RISK
            
            # Changes in this Release
              - reactivate possibility to use the Caller standalone via source
              - changed webcaller design
              - add new soundpacks
              - add new languages IT, RU
              - add more realistic caller behaviour arg -CRL "--caller-real-life" (just X01)
              - add if no playername soundkey avaialble play "player one, two....." 
            
        draft: false
        prerelease: true
        
    - name: Output Release URL File
      run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
    - name: Save Release URL File for publish
      uses: actions/upload-artifact@v4
      with:
        name: release_url
        path: release_url.txt

  build:
    name: Build packages
    needs: createrelease
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            TARGET: macos
            CMD_BUILD: pyinstaller -F -n darts-caller-mac -i resources/darts-caller.icns --add-data "templates:templates" --add-data "assets:assets" --add-data "static:static" --add-data ".env:.env" --collect-all certifi darts-caller.py 
            OUT_FILE_NAME: darts-caller-mac
            ASSET_MIME: application/zip

          - os: macos-13
            TARGET: macos
            CMD_BUILD: pyinstaller -F -n darts-caller-mac64 -i resources/darts-caller.icns --add-data "templates:templates" --add-data "assets:assets" --add-data "static:static" --add-data ".env:.env" --collect-all certifi darts-caller.py 
            OUT_FILE_NAME: darts-caller-mac64
            ASSET_MIME: application/zip

          - os: ubuntu-22.04
            TARGET: ubuntu
            CMD_BUILD: pyinstaller -F -n darts-caller -i resources/darts-caller.svg --add-data "templates:templates" --add-data "assets:assets" --add-data "static:static" --add-data ".env:.env" --collect-all certifi darts-caller.py
            OUT_FILE_NAME: darts-caller
            ASSET_MIME: application/octet-stream

          - os: windows-latest
            TARGET: windows
            CMD_BUILD: pyinstaller -F -n darts-caller -i resources/darts-caller.ico --add-data "templates;templates" --add-data "assets:assets" --add-data "static;static" --add-data ".env;.env" --collect-all certifi darts-caller.py
            OUT_FILE_NAME: darts-caller.exe
            ASSET_MIME: application/vnd.microsoft.portable-executable

          - os: ubuntu-22.04
            TARGET: linux-arm64
            CMD_BUILD: |
              sudo apt-get update
              sudo apt-get install -y qemu-user-static binfmt-support
              docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
              docker run --rm -v /usr/bin/qemu-arm-static:/usr/bin/qemu-arm-static --platform linux/arm64/v8 -v $(pwd):/workdir -w /workdir arm64v8/ubuntu:22.04 bash -c "apt-get update -y && apt-get install -y python3-pip && pip install -r requirements.txt && pyinstaller -F -n darts-caller-arm64 -i resources/darts-caller.svg --add-data 'templates:templates' --add-data "assets:assets" --add-data 'static:static' --add-data ".env:.env" --collect-all certifi darts-caller.py"
            OUT_FILE_NAME: darts-caller-arm64
            ASSET_MIME: application/octet-stream



    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.8
      uses: actions/setup-python@v4
      with:
        python-version: 3.8

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        touch .env
        echo "AUTODARTS_CLIENT_ID=${{ secrets.AUTODARTS_CLIENT_ID }}" > .env
        echo "AUTODARTS_CLIENT_SECRET=${{ secrets.AUTODARTS_CLIENT_SECRET }}" >> .env
        chmod 755 .env  # Set permissions to be readable
        echo "ID and Secret stored"

    - name: Build with pyinstaller for ${{matrix.TARGET}}
      run: ${{matrix.CMD_BUILD}}

    - name: Load Release URL File from release job
      uses: actions/download-artifact@v4
      with:
        name: release_url

    - name: Get Release File Name & Upload URL
      id: get_release_info
      shell: bash
      run: |
        value=`cat release_url.txt`
        echo ::set-output name=upload_url::$value
        
    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./dist/${{ matrix.OUT_FILE_NAME}}
        asset_name: ${{ matrix.OUT_FILE_NAME}}
        asset_content_type: ${{ matrix.ASSET_MIME}}

  build_docker_image:
    name: Build and Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: build
    env:
      PLATFORMS: linux/amd64,linux/arm64
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set Docker Image Metadata
        id: set_image_metadata
        uses: docker/metadata-action@v3
        with:
          # list of Docker images to use as base name for tags
          images: |
            docker.io/${{ github.repository }}
          # Docker tags based on the following events/attributes
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}.{{patch}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
            type=semver,pattern={{major}}.{{minor}}.{{patch}},value=latest

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ./docker
          provenance: false
          platforms: ${{ env.PLATFORMS }}
          build-args: |
            REF=${{ github.ref_name }}
            REPOSITORY=${{ github.repository }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.set_image_metadata.outputs.tags }}
          labels: ${{ steps.set_image_metadata.outputs.labels }}
